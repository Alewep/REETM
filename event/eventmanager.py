import pygame.time


class Event(object):
    """
    A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __init__(self):
        self.name = "Generic event"

    def __str__(self):
        return self.name


class QuitEvent(Event):
    """
    Quit event.
    """

    def __init__(self):
        self.name = "Quit event"


class TickEvent(Event):
    """
    Tick event.
    """

    def __init__(self):
        self.name = "Tick event"


class KickEvent(Event):
    def __init__(self, kick):
        self.name = "Kick event"
        self.kick = kick
        self.kick.setTimeSend()

    def getKick(self):
        return self.kick

class SnareEvent(Event):
    def __init__(self, snare):
        self.name = "Kick event"
        self.snare = snare
        self.snare.setTimeSend()

    def getSnare(self):
        return self.snare

class HihatEvent(Event):
    def __init__(self, hihat):
        self.name = "Kick event"
        self.hihat = hihat
        self.hihat.setTimeSend()

    def getHihat(self):
        return self.hihat

class InputEvent(Event):
    """
    Keyboard or mouse input event.
    """

    def __init__(self, instrumentclass): #instrumentclass is int
        self.name = "Input event"
        self.classe = instrumentclass
        self.time = pygame.time.get_ticks()

    def getTime(self):
        return self.time

    def getClasseInstrument(self):
        return self.classe

class ScoreEvent(Event):

    def __init__(self, success_class, current_score):
        self.name = "Score event"
        self.type_success = success_class
        self.score = current_score

    def getSucces(self):
        return self.type_success

    def getScore(self):
        return self.score

class InitializeEvent(Event):
    """
    Tells all listeners to initialize themselves.
    This includes loading libraries and resources.
    
    Avoid initializing such things within listener __init__ calls 
    to minimize snafus (if some rely on others being yet created.)
    """

    def __init__(self):
        self.name = "Initialize event"


class EventManager(object):
    """
    We coordinate communication between the Model, View, and Controller.
    """

    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()

    def RegisterListener(self, listener):
        """ 
        Adds a listener to our spam list. 
        It will receive Post()ed events through its notify(event) call.
        """

        self.listeners[listener] = 1

    def UnregisterListener(self, listener):
        """ 
        Remove a listener from our spam list.
        This is implemented but hardly used.
        Our weak ref spam list will auto remove any listeners who stop existing.
        """

        if listener in self.listeners.keys():
            del self.listeners[listener]

    def Post(self, event):
        """
        Post a new event to the message queue.
        It will be broadcast to all listeners.
        """

        for listener in self.listeners.keys():
            listener.notify(event)

